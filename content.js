function looksLikePolicyPage() {
  const u = location.href.toLowerCase();
  const guess =
    /(terms|conditions|privacy|policy|legal|eula|agreement|contract)/;
  const heading =
    document.querySelector("h1,h2")?.innerText.toLowerCase() || "";
  return guess.test(u) || guess.test(heading);
}

function extractMainText() {
  // Remove script and style elements
  const scripts = document.querySelectorAll(
    "script, style, nav, header, footer, aside"
  );
  scripts.forEach((el) => el.remove());

  // Get main content areas
  const mainSelectors = [
    "main",
    '[role="main"]',
    ".main-content",
    ".content",
    ".terms",
    ".privacy",
    ".legal",
    "article",
  ];

  let mainContent = null;
  for (const selector of mainSelectors) {
    mainContent = document.querySelector(selector);
    if (mainContent) break;
  }

  // Fallback to body if no main content found
  const contentElement = mainContent || document.body;
  return contentElement.innerText || contentElement.textContent || "";
}

function createPanel(summary) {
  // Remove existing panel if it exists
  const existingPanel = document.getElementById("clausemap-panel");
  if (existingPanel) {
    existingPanel.remove();
  }

  // Inject CSS if not already present
  if (!document.getElementById("clausemap-styles")) {
    const link = document.createElement("link");
    link.id = "clausemap-styles";
    link.rel = "stylesheet";
    link.href = chrome.runtime.getURL("ui.css");
    document.head.appendChild(link);
  }

  const panel = document.createElement("div");
  panel.id = "clausemap-panel";

  const riskTableRows =
    summary.riskTable
      ?.map(
        (r) =>
          `<tr>
      <td class="risk-name">${r.risk}</td>
      <td class="risk-level ${r.level?.toLowerCase()}">${r.level}</td>
      <td class="risk-why">${r.why}</td>
    </tr>`
      )
      .join("") || "";

  panel.innerHTML = `
    <div class="cm-header">
      <h2>Legal Analysis</h2>
      <button id="cm-close" class="cm-close">Ã—</button>
    </div>
    <div class="cm-content">
      <div class="cm-summary">
        <h3>Key Points</h3>
        <ul class="cm-bullets">
          ${
            summary.summaryBullets?.map((b) => `<li>${b}</li>`).join("") ||
            "<li>No summary available</li>"
          }
        </ul>
      </div>
      
      ${
        summary.riskTable?.length > 0
          ? `
        <div class="cm-risks">
          <h3>Risk Assessment</h3>
          <div class="cm-table-container">
            <table class="cm-table">
              <thead>
                <tr>
                  <th>Risk</th>
                  <th>Level</th>
                  <th>Why</th>
                </tr>
              </thead>
              <tbody>
                ${riskTableRows}
              </tbody>
            </table>
          </div>
        </div>
      `
          : ""
      }
      
      <div class="cm-footer">
        <small>ðŸ¤– Generated by ClauseMap â€¢ <a href="#" id="cm-refresh">Refresh Analysis</a></small>
      </div>
    </div>
  `;

  // Add event listeners
  const closeBtn = panel.querySelector("#cm-close");
  const refreshBtn = panel.querySelector("#cm-refresh");

  closeBtn.addEventListener("click", () => {
    panel.remove();
  });

  refreshBtn.addEventListener("click", (e) => {
    e.preventDefault();
    chrome.runtime.sendMessage({ type: "REFRESH_SUMMARY" });
  });

  document.body.appendChild(panel);

  // Add entrance animation
  setTimeout(() => {
    panel.classList.add("cm-visible");
  }, 10);
}

chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
  console.log("Content script received message:", msg.type);

  if (msg.type === "EXTRACT_TEXT") {
    try {
      const text = extractMainText();
      const isPolicyPage = looksLikePolicyPage();

      console.log("Extracted text length:", text.length);
      console.log("Is policy page:", isPolicyPage);

      sendResponse({
        url: location.href,
        title: document.title,
        text: text,
        isPolicyPage: isPolicyPage,
      });
    } catch (error) {
      console.error("Error extracting text:", error);
      sendResponse({
        url: location.href,
        title: document.title,
        text: document.body.innerText || "",
        isPolicyPage: false,
        error: error.message,
      });
    }
    return true; // Keep message channel open
  }

  if (msg.type === "RENDER_SUMMARY") {
    try {
      createPanel(msg.payload);
    } catch (error) {
      console.error("Error creating panel:", error);
    }
  }

  if (msg.type === "REFRESH_SUMMARY") {
    chrome.runtime.sendMessage({ type: "SUMMARIZE", tabId: sender.tab.id });
  }
});
